#spring.application.name=order-service

server:
  port: 8052

spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/order-services
    username: postgres
    password: root
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
  application:
    name: ORDER-SERVICE

# Kafka Properties
  kafka:
    bootstrap-servers: localhost:9092
    template:
      default-topic: notificationTopic
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring :
          json :
            type :
              mapping : event:com.example.orderservice.event.OrderPlacedEvent

eureka:
  instance:
    prefer-ip-address: true
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defaultZone: http://eureka:password@localhost:8761/eureka


#resilience properties

resilience4j:
  circuitbreaker:
    instances:
      inventory:
        registerHealthIndicator: true
        event-consumer-buffer-size: 10
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 5
        failureRateThreshold: 5
        waitDurationInOpenState: 5s
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true

  timelimiter:
    instances:
      inventory:
        timeout-duration: 3s


management:
  endpoints:
    web:
      exposure:
        include: prometheus
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans
  tracing:
    sampling:
      probability: '1.0'

logging:

  pattern:
    level: '%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]'

